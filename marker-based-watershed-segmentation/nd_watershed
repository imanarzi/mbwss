#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 12 15:38:55 2018

@author: imananwarzai
"""

import nibabel as nib
from dipy.viz import window, actor, ui
import numpy as np
import scipy as sp
from skimage.filters import threshold_otsu
from skimage.morphology import watershed
   

def build_label(text):
    label = ui.TextBlock2D()
    label.message = text
    label.font_size = 18
    label.font_family = 'Arial'
    label.justification = 'left'
    label.bold = False
    label.italic = False
    label.shadow = False
    label.background = (0, 0, 0)
    label.color = (1, 1, 1)
    return label

def win_callback(obj, event):
        global size
        if size != obj.GetSize():
            size_old = size
            size = obj.GetSize()
            size_change = [size[0] - size_old[0], 0]
            panel.re_align(size_change)
 
    
def change_slice_z(slider):
    global shape, image_actor_x, image_actor_y, image_actor_z
    z = int(np.round(slider.value))
    image_actor_z.display_extent(0, shape[0] - 1, 0, shape[1] - 1, z, z)


def change_slice_x(slider):
    global shape, image_actor_x, image_actor_y, image_actor_z
    x = int(np.round(slider.value))
    image_actor_x.display_extent(x, x, 0, shape[1] - 1, 0, shape[2] - 1)


def change_slice_y(slider):
    global shape, image_actor_x, image_actor_y, image_actor_z
    y = int(np.round(slider.value))
    image_actor_y.display_extent(0, shape[0] - 1, y, y, 0, shape[2] - 1)
        
def show_slices_3d(s):
    global shape, image_actor_x, image_actor_y, image_actor_z
    shape = s.shape
    renderer = window.Renderer()
    renderer.background((0.5, 0.5, 0.5))
    image_actor_z = actor.slicer(s, affine=np.eye(4))
    image_actor_x = image_actor_z.copy()
    x_midpoint = int(np.round(shape[0] / 2))
    image_actor_x.display_extent(x_midpoint,
                                 x_midpoint, 0,
                                 shape[1] - 1,
                                 0,
                                 shape[2] - 1)
    image_actor_y = image_actor_z.copy()
    y_midpoint = int(np.round(shape[1] / 2))
    image_actor_y.display_extent(0,
                                 shape[0] - 1,
                                 y_midpoint,
                                 y_midpoint,
                                 0,
                                 shape[2] - 1)
    renderer.add(image_actor_z)
    renderer.add(image_actor_x)
    renderer.add(image_actor_y)
    show_m = window.ShowManager(renderer, size=(1200, 900))
    show_m.initialize()
    line_slider_z = ui.LineSlider2D(min_value=0,
                                    max_value=shape[2] - 1,
                                    initial_value=shape[2] / 2,
                                    text_template="{value:.0f}",
                                    length=140)
    line_slider_x = ui.LineSlider2D(min_value=0,
                                    max_value=shape[0] - 1,
                                    initial_value=shape[0] / 2,
                                    text_template="{value:.0f}",
                                    length=140)
    line_slider_y = ui.LineSlider2D(min_value=0,
                                    max_value=shape[1] - 1,
                                    initial_value=shape[1] / 2,
                                    text_template="{value:.0f}",
                                    length=140)
    line_slider_z.on_change = change_slice_z
    line_slider_x.on_change = change_slice_x
    line_slider_y.on_change = change_slice_y
    line_slider_label_z = build_label(text="Z Slice")
    line_slider_label_x = build_label(text="X Slice")
    line_slider_label_y = build_label(text="Y Slice")
    panel = ui.Panel2D(size=(300, 200),
                       color=(1, 1, 1),
                       opacity=0.1,
                       align='right',
                       center=(1030, 120))
    panel.add_element(line_slider_label_x, 'relative', (0.1, 0.75))
    panel.add_element(line_slider_x, 'relative', (0.38, 0.75))
    panel.add_element(line_slider_label_y, 'relative', (0.1, 0.55))
    panel.add_element(line_slider_y, 'relative', (0.38, 0.55))
    panel.add_element(line_slider_label_z, 'relative', (0.1, 0.35))
    panel.add_element(line_slider_z, 'relative', (0.38, 0.35))
    show_m.ren.add(panel) 
    global size
    size = renderer.GetSize()
    show_m.initialize() 
    interactive = True
    renderer.zoom(1.5)
    renderer.reset_clipping_range()
    if interactive:
        show_m.add_window_callback(win_callback)
        show_m.render()
        show_m.start()
    else:
        window.record(renderer, out_path='bundles_and_3_slices.png', size=(1200, 900),
                      reset_camera=False)
    
def show_slices_2d(s): 
    renderer = window.Renderer()
    renderer.background((0.5, 0.5, 0.5))
    slice_actor = actor.slicer(s)
    cnt = 0
    X, Y, Z = slice_actor.shape[:3]    
    rows = int(Z/15) - 3
    cols = 15
    border = 10
    for j in range(rows):
        for i in range(cols):
            slice_mosaic = slice_actor.copy()
            slice_mosaic.display(None, None, cnt)
            slice_mosaic.SetPosition((X + border) * i,
                                     0.5 * cols * (Y + border) - (Y + border) * j,
                                     0)
            slice_mosaic.SetInterpolate(False)
            renderer.add(slice_mosaic)
            cnt += 1
            if cnt > Z:
                break
        if cnt > Z:
            break        
    renderer.add(slice_actor)
    renderer.reset_camera()
    renderer.zoom(1.4)    
    window.show(renderer, size=(600, 600), reset_camera=False)

def segment(in_array):
    img = in_array.copy()
    blur = sp.ndimage.gaussian_filter(img, sigma=0.5)
    closing = sp.ndimage.morphology.grey_closing(blur, size=(3,3,3))
    thresh = threshold_otsu(closing)
    img_bin = closing <= thresh
    img_bin = img_bin + np.zeros(img.shape)
    opening = sp.ndimage.grey_opening(img_bin, size=(3,3,3))
    sure_bg = sp.ndimage.morphology.grey_dilation(opening, size=(3,3,3))
    dist_transform = sp.ndimage.morphology.distance_transform_edt(opening)
    sure_fg = np.clip(dist_transform,0.7*dist_transform.max(),255)
    sure_fg = np.where(dist_transform < 0.7*dist_transform.max(), dist_transform, 255)
    sure_fg = np.where(sure_fg > 0.7*dist_transform.max(), sure_fg, 0)
    sure_fg = np.uint8(sure_fg)
    unknown = sp.subtract(sure_bg,sure_fg).astype(np.uint8)    
    markers, retval = sp.ndimage.label(sure_fg)
    markers = markers+1
    markers[unknown==0] = 255
    markers = watershed(img, markers, connectivity=1, offset=None, mask=None, 
                        compactness=0, watershed_line=True)
    img[markers == 0] = 255 
    return img
    
def segment_and_isolate(in_array):
    img = in_array.copy()
    blur = sp.ndimage.gaussian_filter(img, sigma=1.5)
    closing = sp.ndimage.morphology.grey_closing(blur, size=(7,7,7))
    erosion = sp.ndimage.morphology.grey_erosion(closing, size=(11,11,11))
    thresh = threshold_otsu(erosion)
    img_bin = erosion <= thresh
    img_bin = img_bin + np.zeros(img.shape)
    opening = sp.ndimage.grey_opening(img_bin, size=(3,3,3))
    sure_bg = sp.ndimage.morphology.grey_dilation(opening, size=(3,3,3))
    dist_transform = sp.ndimage.morphology.distance_transform_edt(opening)
    sure_fg = np.clip(dist_transform,0.7*dist_transform.max(),255)
    sure_fg = np.where(dist_transform < 0.7*dist_transform.max(), dist_transform, 255)
    sure_fg = np.where(sure_fg > 0.7*dist_transform.max(), sure_fg, 0)
    sure_fg = np.uint8(sure_fg)
    unknown = sp.subtract(sure_bg,sure_fg).astype(np.uint8)    
    markers, retval = sp.ndimage.label(sure_fg)    
    markers = markers+1
    markers[unknown==0] = 255
    markers = watershed(img, markers) 
    img[markers != 255] = 0 
    return img

def show_slices_segmented_2d(s): 
   
    renderer = window.Renderer()
    renderer.background((0.5, 0.5, 0.5))
    out_img = segment(s)
    slice_actor = actor.slicer(s)
    slice_out_actor = actor.slicer(out_img)
    cnt = 0
    X, Y, Z = slice_actor.shape[:3]    
    rows = int(Z/15) - 3
    cols = 15
    border = 20
    for j in range(rows):
        for i in range(cols):
            slice_mosaic = slice_actor.copy()
            slice_out_mosaic = slice_out_actor.copy()
            slice_mosaic.display(None, None, cnt)
            slice_out_mosaic.display(None, None, cnt)
            slice_mosaic.SetPosition((X + border) * 2*i,
                                     0.5 * cols * (Y + border) - (Y + border) * j,
                                     0)
            slice_out_mosaic.SetPosition((X + border) * (2*i+1),
                                     0.5 * cols * (Y + border) - (Y + border) * (j),
                                     0)
            slice_mosaic.SetInterpolate(False)
            slice_out_mosaic.SetInterpolate(False)
            renderer.add(slice_mosaic)
            renderer.add(slice_out_mosaic)
            cnt += 1
            if cnt > Z:
                break
        if cnt > Z:
            break
    renderer.add(slice_actor)
    renderer.reset_camera()
    renderer.zoom(1.4)
    window.show(renderer, size=(600, 600), reset_camera=False)
    print("done")

im = nib.load('/Users/imananwarzai/Downloads/sub-OAS30015_sess-d0116_run-02_T1w.nii')
show_slices_segmented_2d(im.get_data())